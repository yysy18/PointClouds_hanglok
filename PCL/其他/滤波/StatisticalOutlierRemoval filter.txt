#include <iostream>
#include <pcl/io/pcd_io.h>
#include <pcl/point_types.h>
#include <pcl/filters/statistical_outlier_removal.h>
#include <pcl/visualization/pcl_visualizer.h>

int main(int argc, char** argv)
{
    // 创建点云对象（类型为 pcl::PointXYZRGB）
    pcl::PointCloud<pcl::PointXYZRGB>::Ptr cloud(new pcl::PointCloud<pcl::PointXYZRGB>);
    pcl::PointCloud<pcl::PointXYZRGB>::Ptr cloud_filtered(new pcl::PointCloud<pcl::PointXYZRGB>);

    // 读取点云文件
    if (pcl::io::loadPCDFile<pcl::PointXYZRGB>("../arm_desk.pcd", *cloud) == -1) //* 读取文件
    {
        PCL_ERROR("Couldn't read file arm_desk.pcd \n");
        return (-1);
    }

    std::cerr << "Cloud before filtering: " << std::endl;
    std::cerr << *cloud << std::endl;

    // 创建统计滤波器对象
    pcl::StatisticalOutlierRemoval<pcl::PointXYZRGB> sor;
    sor.setInputCloud(cloud);
    sor.setMeanK(50);
    sor.setStddevMulThresh(0.1);
    sor.filter(*cloud_filtered);

    std::cerr << "Cloud after filtering: " << std::endl;
    std::cerr << *cloud_filtered << std::endl;

    // 保存滤波后的点云
    pcl::PCDWriter writer;
    writer.write<pcl::PointXYZRGB>("../filtered_cloud.pcd", *cloud_filtered, true);

    // 初始化PCL可视化对象
    pcl::visualization::PCLVisualizer::Ptr viewer(new pcl::visualization::PCLVisualizer("3D Viewer"));
    viewer->setBackgroundColor(0, 0, 0);

    // 显示滤波后的点云
    pcl::visualization::PointCloudColorHandlerRGBField<pcl::PointXYZRGB> rgb_filtered(cloud_filtered);
    viewer->addPointCloud<pcl::PointXYZRGB>(cloud_filtered, rgb_filtered, "filtered cloud");
    viewer->setPointCloudRenderingProperties(pcl::visualization::PCL_VISUALIZER_POINT_SIZE, 3, "filtered cloud");

    // 设置摄像机参数并开始可视化
    viewer->addCoordinateSystem(1.0);
    viewer->initCameraParameters();
    viewer->spin();

    return (0);
}
