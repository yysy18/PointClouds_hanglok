#include <pcl/point_types.h>
#include <pcl/io/ply_io.h>
#include <pcl/visualization/pcl_visualizer.h>
#include <pcl/keypoints/uniform_sampling.h>
#include <pcl/filters/extract_indices.h>

int main(int argc, char** argv)
{
    // 创建点云对象
    pcl::PointCloud<pcl::PointXYZRGB>::Ptr cloud_in(new pcl::PointCloud<pcl::PointXYZRGB>);
    pcl::PointCloud<pcl::PointXYZRGB>::Ptr cloud_filtered(new pcl::PointCloud<pcl::PointXYZRGB>);

    // 加载点云数据
    if (pcl::io::loadPLYFile<pcl::PointXYZRGB>("../cloud4_3.ply", *cloud_in) == -1)
    {
        PCL_ERROR("Couldn't read file cloud4_3.ply\n");
        return -1;
    }

    // 输出点云数量
    std::cout << "Number of points in the input cloud: " << cloud_in->size() << std::endl;

    // 均匀采样
    pcl::UniformSampling<pcl::PointXYZRGB> filter;
    filter.setInputCloud(cloud_in);
    filter.setRadiusSearch(0.02);                               // 体素块大小
    filter.filter(*cloud_filtered);


    // 输出采样后点云的数量
    std::cout << "Number of points after filtering: " << cloud_filtered->size() << std::endl;

    // 保存最终滤波后的点云
    pcl::io::savePLYFileBinary("../filtered_cloud.ply", *cloud_filtered);
    std::cout << "Filtered cloud saved as filtered_cloud.ply with " << cloud_filtered->size() << " points." << std::endl;

    // 创建可视化窗口
    pcl::visualization::PCLVisualizer viewer("Cloud Viewer");
    viewer.setBackgroundColor(0.0, 0.0, 0.0);

    // 添加点云到可视化窗口
    viewer.addPointCloud<pcl::PointXYZRGB>(cloud_filtered, "filtered cloud");
    viewer.setPointCloudRenderingProperties(pcl::visualization::PCL_VISUALIZER_POINT_SIZE, 1, "filtered cloud");
    viewer.resetCamera();

    // 开始可视化
    while (!viewer.wasStopped())
    {
        viewer.spinOnce();
    }

    return 0;
}
