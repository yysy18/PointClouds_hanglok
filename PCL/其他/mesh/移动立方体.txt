#include <pcl/io/pcd_io.h>
#include <pcl/point_types.h>
#include <pcl/features/normal_3d.h>
#include <pcl/search/kdtree.h>
#include <pcl/surface/marching_cubes_hoppe.h>
#include <pcl/visualization/pcl_visualizer.h>
#include <iostream>

int main(int argc, char** argv)
{
    // 创建 PointCloud<pcl::PointXYZRGB> 智能指针
    pcl::PointCloud<pcl::PointXYZRGB>::Ptr cloud(new pcl::PointCloud<pcl::PointXYZRGB>);
    pcl::PCLPointCloud2::Ptr cloud_blob(new pcl::PCLPointCloud2);

    // 加载点云数据
    if (pcl::io::loadPCDFile("../1.pcd", *cloud_blob) == -1)
    {
        PCL_ERROR("Couldn't read file \n");
        return -1;
    }
    pcl::fromPCLPointCloud2(*cloud_blob, *cloud);
    std::cout << "Original Cloud Size: " << cloud->points.size() << std::endl;

    // 创建法线估计对象
    pcl::NormalEstimation<pcl::PointXYZRGB, pcl::Normal> n;
    pcl::PointCloud<pcl::Normal>::Ptr normals(new pcl::PointCloud<pcl::Normal>);
    pcl::search::KdTree<pcl::PointXYZRGB>::Ptr tree(new pcl::search::KdTree<pcl::PointXYZRGB>);
    tree->setInputCloud(cloud);
    n.setInputCloud(cloud);
    n.setSearchMethod(tree);
    n.setKSearch(20);
    n.compute(*normals);
    std::cout << "Normals Computed" << std::endl;

    // 将点云与法线字段拼接
    pcl::PointCloud<pcl::PointXYZRGBNormal>::Ptr cloud_with_normals(new pcl::PointCloud<pcl::PointXYZRGBNormal>);
    pcl::concatenateFields(*cloud, *normals, *cloud_with_normals);
    std::cout << "Cloud with Normals Size: " << cloud_with_normals->points.size() << std::endl;

    // 创建搜索树
    pcl::search::KdTree<pcl::PointXYZRGBNormal>::Ptr tree2(new pcl::search::KdTree<pcl::PointXYZRGBNormal>);
    tree2->setInputCloud(cloud_with_normals);

    // 创建 MarchingCubes 对象，并设置参数
    pcl::MarchingCubesHoppe<pcl::PointXYZRGBNormal> mc;
    mc.setIsoLevel(0.0f); // 等值面级别，0.0 是默认值
    mc.setGridResolution(100, 100, 100); // 提高网格分辨率
    mc.setPercentageExtendGrid(0.1f); // 增加网格扩展百分比
    mc.setSearchMethod(tree2);
    mc.setInputCloud(cloud_with_normals);

    // 创建多边形网格，用于存储结果
    pcl::PolygonMesh mesh;

    // 执行重建
    mc.reconstruct(mesh);
    std::cout << "Mesh Reconstructed" << std::endl;

    // 创建可视化对象
    pcl::visualization::PCLVisualizer viewer("PCL Viewer");

    // 设置可视化窗口背景颜色
    viewer.setBackgroundColor(1.0, 1.0, 1.0); // 设置背景颜色为白色

    // 添加多边形网格到可视化对象
    viewer.addPolygonMesh(mesh, "mesh");

    // 设置相机位置
    viewer.setCameraPosition(0, 0, 10, 0, -1, 0);

    // 启动可视化循环
    while (!viewer.wasStopped())
    {
        viewer.spinOnce(100); // 让视图有更多时间进行更新
    }

    return 0;
}
