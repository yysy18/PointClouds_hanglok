#include <pcl/point_types.h>
#include <pcl/io/pcd_io.h>
#include <pcl/kdtree/kdtree_flann.h>
#include <pcl/surface/mls.h>
#include <pcl/visualization/cloud_viewer.h>
#include <iostream>

// 平滑点云函数
void SmoothPointcloud(pcl::PointCloud<pcl::PointXYZRGB>::Ptr& cloud_in, pcl::PointCloud<pcl::PointXYZRGB>::Ptr& cloud_out)
{
    std::cout << "Begin smoothing: size " << cloud_in->size() << std::endl;

    // 创建KD-Tree用于最近邻搜索
    pcl::search::KdTree<pcl::PointXYZRGB>::Ptr tree(new pcl::search::KdTree<pcl::PointXYZRGB>);

    // 定义最小二乘实现的对象
    pcl::MovingLeastSquares<pcl::PointXYZRGB, pcl::PointXYZRGB> mls;
    mls.setSearchMethod(tree);    // 设置KD-Tree作为搜索方法
    mls.setComputeNormals(false); // 不计算法线
    mls.setInputCloud(cloud_in);  // 设置待处理点云
    mls.setPolynomialOrder(3);    // 拟合2阶多项式
    mls.setPolynomialFit(false);  // 设置为false可以加速平滑
    mls.setSearchRadius(0.1);    // 设置用于拟合的K近邻半径
    mls.process(*cloud_out);      // 执行平滑处理

    std::cout << "Success smooth, size: " << cloud_out->size() << std::endl;
}

int main(int argc, char** argv)
{
    // 创建 PointCloud<pcl::PointXYZRGB> 智能指针
    pcl::PointCloud<pcl::PointXYZRGB>::Ptr cloud(new pcl::PointCloud<pcl::PointXYZRGB>);
    pcl::PointCloud<pcl::PointXYZRGB>::Ptr smoothed_cloud(new pcl::PointCloud<pcl::PointXYZRGB>);

    // 加载点云数据
    if (pcl::io::loadPCDFile("../1.pcd", *cloud) == -1)
    {
        PCL_ERROR("Couldn't read file \n");
        return -1;
    }

    // 输出点云大小
    std::cout << "Original Cloud Size: " << cloud->points.size() << std::endl;

    // 对点云进行平滑处理
    SmoothPointcloud(cloud, smoothed_cloud);

    // 保存平滑后的点云
    pcl::io::savePCDFile("../2.pcd", *smoothed_cloud);

    // 可视化原始点云
    pcl::visualization::CloudViewer viewer("Cloud Viewer");
    viewer.showCloud(cloud);
    while (!viewer.wasStopped())
    {
    }

    return 0;
}
