#include <pcl/point_cloud.h>                           // 点云类定义头文件
#include <pcl/point_types.h>                          // 点类型定义头文件
#include <pcl/io/pcd_io.h>                             // PCD文件打开存储类头文件
#include <pcl/visualization/pcl_visualizer.h>         // 可视化类头文件
#include <pcl/kdtree/kdtree_flann.h>                   // 用于对点云进行Kd树搜索
#include <pcl/surface/mls.h>                           // 点云平滑类头文件
#include <pcl/surface/gp3.h>                           // 对点云进行三角化处理

typedef pcl::PointXYZRGB PointT;
typedef pcl::PointCloud<PointT> PointCloud;
typedef pcl::PointCloud<PointT>::Ptr PointCloudPtr;

typedef pcl::PointXYZRGBNormal SurfelT;
typedef pcl::PointCloud<SurfelT> SurfelCloud;
typedef pcl::PointCloud<SurfelT>::Ptr SurfelCloudPtr;

// 把基本点云转化成光滑的带有法线信息的点云
SurfelCloudPtr reconstructSurface(const PointCloudPtr& input, float radius, int polynomial_order) {
    pcl::MovingLeastSquares<PointT, SurfelT> mls;
    pcl::search::KdTree<PointT>::Ptr tree(new pcl::search::KdTree<PointT>);
    mls.setSearchMethod(tree);
    mls.setSearchRadius(radius);
    mls.setComputeNormals(true);
    mls.setSqrGaussParam(radius * radius);
    mls.setPolynomialFit(polynomial_order > 1);
    mls.setPolynomialOrder(polynomial_order);
    mls.setInputCloud(input);

    SurfelCloudPtr output(new SurfelCloud);
    mls.process(*output);
    return output;
}

// 为点云表面添加三角网格面元
pcl::PolygonMeshPtr triangulateMesh(const SurfelCloudPtr& surfels) {
    pcl::search::KdTree<SurfelT>::Ptr tree(new pcl::search::KdTree<SurfelT>);
    tree->setInputCloud(surfels);

    pcl::GreedyProjectionTriangulation<SurfelT> gp3;
    pcl::PolygonMeshPtr triangles(new pcl::PolygonMesh);

    gp3.setSearchRadius(0.03);
    gp3.setMu(7.0);
    gp3.setMaximumNearestNeighbors(20);
    gp3.setMaximumSurfaceAngle(M_PI / 4); // 45 degrees
    gp3.setMinimumAngle(M_PI / 18); // 10 degrees
    gp3.setMaximumAngle(2 * M_PI / 3); // 120 degrees
    gp3.setNormalConsistency(true);

    gp3.setInputCloud(surfels);
    gp3.setSearchMethod(tree);
    gp3.reconstruct(*triangles);

    return triangles;
}

int main(int argc, char** argv) {
    // 创建 PointCloud<pcl::PointXYZRGB> 智能指针
    PointCloudPtr cloud(new PointCloud);

    // 加载点云数据
    if (pcl::io::loadPCDFile("../output.pcd", *cloud) == -1) {
        PCL_ERROR("Couldn't read file \n");
        return -1;
    }

    // 输出点云大小
    std::cout << "Original Cloud Size: " << cloud->points.size() << std::endl;

    // 计算表面元素
    std::cout << "Computing surface ... " << std::endl;
    double mls_radius = 0.05;
    int polynomial_order = 2;
    auto surfels = reconstructSurface(cloud, mls_radius, polynomial_order);

    // 计算三角网格
    std::cout << "Computing mesh ... " << std::endl;
    pcl::PolygonMeshPtr mesh = triangulateMesh(surfels);

    // 可视化网格
    std::cout << "Displaying mesh ... " << std::endl;
    pcl::visualization::PCLVisualizer viewer("Mesh Viewer");
    viewer.addPolygonMesh(*mesh, "mesh");
    viewer.setBackgroundColor(0.0, 0.0, 0.0);
    viewer.resetCamera();
    viewer.spin();

    return 0;
}
