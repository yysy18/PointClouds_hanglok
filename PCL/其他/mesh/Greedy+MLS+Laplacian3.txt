#include <pcl/point_cloud.h>                          // 点云类定义头文件
#include <pcl/point_types.h>                          // 点类型定义头文件
#include <pcl/io/ply_io.h>                            // PCD文件打开存储类头文件
#include <pcl/io/ply_io.h>                            // 用于保存PLY文件
#include <pcl/visualization/pcl_visualizer.h>         // 可视化类头文件
#include <pcl/kdtree/kdtree_flann.h>                  // 用于对点云进行Kd树搜索
#include <pcl/surface/mls.h>                          // 点云平滑类头文件
#include <pcl/surface/gp3.h>                          // 对点云进行三角化处理
#include <pcl/surface/vtk_smoothing/vtk_utils.h>      // 用于PCL和VTK数据的相互转换
#include <pcl/surface/vtk_smoothing/vtk_mesh_smoothing_laplacian.h> // 拉普拉斯平滑
#include <vtkSmoothPolyDataFilter.h>

typedef pcl::PointXYZRGB PointT;
typedef pcl::PointCloud<PointT> PointCloud;
typedef pcl::PointCloud<PointT>::Ptr PointCloudPtr;

typedef pcl::PointXYZRGBNormal SurfelT;
typedef pcl::PointCloud<SurfelT> SurfelCloud;
typedef pcl::PointCloud<SurfelT>::Ptr SurfelCloudPtr;

// 将基本点云转化成光滑的带有法线信息的点云
SurfelCloudPtr reconstructSurface(const PointCloudPtr& input, float radius, int polynomial_order) {
    pcl::MovingLeastSquares<PointT, SurfelT> mls;
    pcl::search::KdTree<PointT>::Ptr tree(new pcl::search::KdTree<PointT>);
    mls.setSearchMethod(tree);
    mls.setSearchRadius(radius);
    mls.setComputeNormals(true);
    mls.setPolynomialFit(polynomial_order > 1);
    mls.setPolynomialOrder(polynomial_order);
    mls.setInputCloud(input);

    SurfelCloudPtr output(new SurfelCloud);
    mls.process(*output);
    return output;
}

// 为点云表面添加三角网格面元
pcl::PolygonMeshPtr triangulateMesh(const SurfelCloudPtr& surfels) {
    pcl::search::KdTree<SurfelT>::Ptr tree(new pcl::search::KdTree<SurfelT>);
    tree->setInputCloud(surfels);

    pcl::GreedyProjectionTriangulation<SurfelT> gp3;
    pcl::PolygonMeshPtr triangles(new pcl::PolygonMesh);

    gp3.setSearchRadius(0.05);                          // 设置搜索半径
    gp3.setMu(20.0);                                     // 设置内侧点搜索距离
    gp3.setMaximumNearestNeighbors(100);                // 设置最大邻居点数
    gp3.setMaximumSurfaceAngle(M_PI / 4);               // 设置最大表面角（45度）
    gp3.setMinimumAngle(M_PI / 18);                     // 设置最小角度（10度）
    gp3.setMaximumAngle(2 * M_PI / 3);                  // 设置最大角度（120度）
    gp3.setNormalConsistency(true);                     // 设置法线一致性

    gp3.setInputCloud(surfels);
    gp3.setSearchMethod(tree);
    gp3.reconstruct(*triangles);

    return triangles;
}

// 对网格应用拉普拉斯平滑
pcl::PolygonMesh smoothMesh(const pcl::PolygonMesh::Ptr& mesh, int iterationsNumber) {
    pcl::MeshSmoothingLaplacianVTK laplacianVtk;
    laplacianVtk.setInputMesh(mesh);
    laplacianVtk.setNumIter(iterationsNumber);
    laplacianVtk.setConvergence(0.5f);
    laplacianVtk.setRelaxationFactor(0.25f);
    laplacianVtk.setFeatureAngle(360.f);
    laplacianVtk.setEdgeAngle(180.f);

    pcl::PolygonMesh smoothedMesh;
    laplacianVtk.process(smoothedMesh);

    return smoothedMesh;
}

int main(int argc, char** argv) {
    // 创建 PointCloud<pcl::PointXYZRGB> 智能指针
    PointCloudPtr cloud(new PointCloud);

    // 加载点云数据
    if (pcl::io::loadPLYFile("C:/Users/HP/Desktop/1/output_cutting.ply", *cloud) == -1) {
        PCL_ERROR("Couldn't read file \n");
        return -1;
    }

    // 输出点云大小
    std::cout << "Original Cloud Size: " << cloud->points.size() << std::endl;

    // 计算表面元素
    std::cout << "Computing surface ... " << std::endl;
    double mls_radius = 0.05;
    int polynomial_order = 2;
    auto surfels = reconstructSurface(cloud, mls_radius, polynomial_order);

    // 计算三角网格
    std::cout << "Computing mesh ... " << std::endl;
    pcl::PolygonMeshPtr mesh = triangulateMesh(surfels);

    // 对网格进行拉普拉斯平滑处理
    std::cout << "Applying Laplacian smoothing ... " << std::endl;
    pcl::PolygonMesh smoothedMesh = smoothMesh(mesh, 3);  // 迭代5次

    // 保存平滑后的网格
    std::string output_filename = "../output_mesh.ply";
    if (pcl::io::savePLYFile(output_filename, smoothedMesh) == -1) {
        PCL_ERROR("Couldn't write file \n");
        return -1;
    }
    std::cout << "Saved smoothed mesh to " << output_filename << std::endl;

    // 可视化网格
    std::cout << "Displaying mesh ... " << std::endl;
    pcl::visualization::PCLVisualizer viewer("Mesh Viewer");
    viewer.addPolygonMesh(smoothedMesh, "smoothed_mesh");
    viewer.setBackgroundColor(0.0, 0.0, 0.0);
    viewer.resetCamera();
    viewer.spin();

    return 0;
}
